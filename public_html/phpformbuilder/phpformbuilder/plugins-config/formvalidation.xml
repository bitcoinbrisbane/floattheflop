<?xml version="1.0" encoding="UTF-8"?>
<root>
    <default>
        <includes>
            <!--
                Path to css and js files into plugins folder.
                If your files are not in plugins folder, use absolute paths.
            -->
            <css>
                <file>formvalidation/dist/css/formValidation.min.css</file>
            </css>
            <js>
                <file>formvalidation/dist/js/FormValidation.full.min.js</file>
            </js>
        </includes>
        <js_code>
<![CDATA[
    var $head   = document.getElementsByTagName('head')[0];
    var script  = document.createElement('script');
    script.type = 'text/javascript';
    script.src  = '%PLUGINS_URL%formvalidation/dist/js/plugins/%FRAMEWORK%.js';

    $head.appendChild(script);

    script.onload = function() {
        const intPhoneNumber = function() {
            return {
                validate: function(input) {
                    if (input.element.iti.isValidNumber()) {
                        return {
                            valid: true
                        };
                    }
                    var countryData = input.element.iti.getSelectedCountryData();
                    return {
                        valid: false,
                        message: form.fv.localization.phone.country.replace("%s", countryData.name)
                    };
                },
            };
        };

        var formId   = $('%selector%').attr('id'),
            dataAttr = $('%selector%').data(),
            form     = forms[formId],
            frameworkPlugin;

        if($('%selector%').find('button[name="submit"]')[0]) {
            alert('The Formvalidation plugin does not allow to name the submit button "submit". You have to rename it or the form will not work.');
        }

        if($('%selector%').find('input[type="hidden"][required]')[0]) {
            alert('The Formvalidation plugin does not allow the "required" attribute on an hidden input. Remove the "required" attribute or the form will not work.');
        }

        if($('%selector%').hasClass('material-form')) {
            frameworkPlugin = new FormValidation.plugins.%FRAMEWORK%({
                rowSelector: function(field, ele) {
                    if ($(ele).hasClass('fv-group')) {
                        // get the 1st class of closest parent div
                        var classList = $(ele).closest('div').attr('class').split(' ').filter(Boolean);
                        return '.' + classList[0];
                    }
                    return '.input-field';
                }
            });
        } else {
            frameworkPlugin = new FormValidation.plugins.%FRAMEWORK%();
        }

        form.fv = FormValidation.formValidation (
            $('%selector%')[0],
            {
                locale: '%language%',
                localization: FormValidation.locales.%language%,
                plugins: {
                    %FRAMEWORK-LOWERCASE%: frameworkPlugin,
                    declarative: new FormValidation.plugins.Declarative({
                        html5Input: true
                    }),
                    aria: new FormValidation.plugins.Aria(),
                    autoFocus: new FormValidation.plugins.AutoFocus(),
                    excluded: new FormValidation.plugins.Excluded({
                        excluded: function(field, element, elements) {
                            // return true to exclude the field
                            var parentHiddenWrapper = element.closest(['.hidden-wrapper:not(.on) *']);

                            if (parentHiddenWrapper !== null) {
                                if (dataAttr.fvDebug !== undefined) {
                                    console.log('%c' + field + ': validation skipped', 'color: #666');
                                }
                                return true;
                            }
                            return false;
                        }
                    }),
                    icon: new FormValidation.plugins.Icon(),
                    sequence: new FormValidation.plugins.Sequence({
                        enabled: true,
                    }),
                    submitButton: new FormValidation.plugins.SubmitButton(),
                    trigger: new FormValidation.plugins.Trigger(),
                }
            }
        )
        .registerValidator('intphonenumber', intPhoneNumber)
        .on('plugins.icon.set', function(e) {
            if (e.iconElement) {
                switch (e.status) {
                    case 'Validating':
                        e.iconElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg"viewBox="0 0 512.333 512" width="16" height="16"> <path d="M440.935 12.574l3.966 82.766C399.416 41.904 331.674 8 256 8 134.813 8 33.933 94.924 12.296 209.824 10.908 217.193 16.604 224 24.103 224h49.084c5.57 0 10.377-3.842 11.676-9.259C103.407 137.408 172.931 80 256 80c60.893 0 114.512 30.856 146.104 77.801l-101.53-4.865c-6.845-.328-12.574 5.133-12.574 11.986v47.411c0 6.627 5.373 12 12 12h200.333c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12h-47.411c-6.853 0-12.315 5.729-11.987 12.574zM256 432c-60.895 0-114.517-30.858-146.109-77.805l101.868 4.871c6.845.327 12.573-5.134 12.573-11.986v-47.412c0-6.627-5.373-12-12-12H12c-6.627 0-12 5.373-12 12V500c0 6.627 5.373 12 12 12h47.385c6.863 0 12.328-5.745 11.985-12.599l-4.129-82.575C112.725 470.166 180.405 504 256 504c121.187 0 222.067-86.924 243.704-201.824 1.388-7.369-4.308-14.176-11.807-14.176h-49.084c-5.57 0-10.377 3.842-11.676 9.259C408.593 374.592 339.069 432 256 432z" fill="#FF4136" /> </svg>';
                        break;

                    case 'Invalid':
                        e.iconElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg"viewBox="0 0 352 512" width="16" height="16"> <path d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z" fill="#F44336" /> </svg>';
                        break;

                    case 'Valid':
                        e.iconElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg"viewBox="0 0 512 512" width="16" height="16"> <path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z" fill="#4CAF50" /> </svg>';
                        break;

                    default:
                        e.iconElement.innerHTML = '';
                        break;
                }
            }
        });

        // callback if function exists
        if(typeof(fvCallback) !== "undefined") {
            setTimeout(fvCallback, 0);
        }

        if (dataAttr.fvDebug === undefined) {
            form.fv.on('core.form.valid', function() {
                if(!$('%selector%').hasClass('ajax-form')) {
                    if (!$('%selector%').hasClass('has-invisible-recaptcha') && !$('%selector%').hasClass('has-recaptcha-v3')) {
                        $('%selector%').submit();
                    }
                } else {
                    $.ajax({
                        url: $('%selector%').attr('action'),
                        type: 'POST',
                        data: $('%selector%').serialize()
                    }).done(function (data) {
                        $(target).html(data);
                    });
                    return false;
                }
            });
        }

        if (dataAttr.fvNoIcon !== undefined) {
            form.fv.deregisterPlugin('icon');
        }

        if ($('#' + formId).find('.litepick')[0]) {
            $('#' + formId).find('.litepick').each(function() {
                $(this).on('change', function() {
                    setTimeout(() => {
                        form.fv.validateField($(this).attr('name'));
                        if ($(this).data('elementEnd') !== undefined) {
                            let elEnd = $(this).data('elementEnd');
                            form.fv.validateField($('#' + elEnd).attr('name'));
                        }
                    }, 400);
                });
            });
        }

        /*=============================
        =            DEBUG            =
        =============================*/

        /*
            If the form has the fvDebug attribute (data-fv-debug=true):
            -----------------------------------------------------------

            - the form will NOT be submitted
            - the browser console will log all the fields validation results
            - the browser console will log the form validation results
         */

        if (dataAttr.fvDebug !== undefined) {

            const validFieldHandler = function(field) {
                // field is name of valid field
                console.log('%c' + field + ' value is valid', 'color: #28A745');
            };

            const invalidFieldHandler = function(field) {
                // field is name of invalid field
                console.log('%c' + field + ' value is invalid', 'color: #A62828');
            };

            form.fv.on('core.field.valid', validFieldHandler);
            form.fv.on('core.field.invalid', invalidFieldHandler);

            form.fv.on('core.form.valid', function() {
                console.log('%c=== FORM is VALID ===', 'background: #28A745;color:#FFF');
                return false;
            });
        }

        /*=====  End of DEBUG  ======*/

        // console.log(form.fv);
    };]]>
        </js_code>
    </default>
</root>
